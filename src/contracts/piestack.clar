;; PIESTACK CONTRACT
;;
;; Generated by Clarity.Tools from piestack.dclr

(define-read-only (make-slice 
                   (address principal)
                   (size int))
 (begin
  (unwrap-panic (if (<= 1 size) (ok 1) (err "Out of bounds: size")))
  {address: address, size: size}))

(define-constant max-slices u99)

(define-read-only (get-payment (share {address: principal, payment: int}))
 (begin
  (unwrap-panic (if (<= 1 (get payment share)) (ok 1) (err "Out of bounds: payment")))
  (get payment share)))

(define-non-fungible-token fundraiser {address: principal})

(define-public (fundraise 
                (address principal))
 (begin
   "Return a principal to raise funds for the bitcoin address"
    (nft-mint? fundraiser {address: address} tx-sender)))

(define-public (reassign 
                (address principal) 
                (manager principal))
 (begin
   "Change the manager of the fundraiser while maintaining the receiving bitcoin address"
   (nft-transfer? fundraiser {address: address} tx-sender manager)))

(define-map portfolio
  ((patron principal))
  ((pie (list 99 {address: principal, size: int}))))
  
(define-read-only (get-portfolio)
 (begin
   "The portfolio of the sender"
   (let ((res_1 (map-get? portfolio {patron: tx-sender})))
    (if (is-none res_1) (print "abort 'map-get?' on line 50") "")
    (unwrap-panic res_1))))

(define-public (set-portfolio! 
                (value {pie: (list 99 {address: principal, size: int})})) 
  (ok (map-set portfolio {patron: tx-sender} value)))

(define-read-only (get-pie) 
  (get pie (get-portfolio)))

(define-read-only (slice-size 
                   (slice {address: principal, size: int}))
 (begin
  (unwrap-panic (if (<= 1 (get size slice)) (ok 1) (err "Out of bounds: size")))
  (get size slice)))

(define-read-only (pie-total (pie (list 99 {address: principal, size: int})))  
  (fold + (map slice-size pie) 0))
  
(define-read-only (get-total)
 (begin
   "Get the total fragments of the portfolio"
   (pie-total (get pie (get-portfolio)))))

(define-read-only (divide 
                    (slice {address: principal, size: int}) 
                    (state {total: int, 
                            amount: int,
                            shares: (list 99 {address: principal,
                                              payment: int})}))
 (begin
  (unwrap-panic (if (<= 1 (get size slice)) (ok 1) (err "Out of bounds: size")))
  (unwrap-panic (if (<= 1 (get total state)) (ok 1) (err "Out of bounds: total")))
  (unwrap-panic (if (<= 1 (get amount state)) (ok 1) (err "Out of bounds: amount")))
  "Add a new share based on the slice, updating remaining funds"
  (let ((size (get size slice))
        (address (get address slice)) (total (get total state))
        (amount (get amount state))
        (shares (get shares state)))
   (let ((payment (/ (* size amount) total))) 
       {total: (- total size),
        amount: (- amount payment),
        shares: (let ((res_2
                       (as-max-len? 
                         (append shares 
                           {address: address, payment: payment})
                         u99))) 
                 (if (is-none res_2) (print "abort 'as-max-len?' on line 94") "")
                 (unwrap-panic res_2))}))))    
  
(define-read-only (distribution 
                   (pie (list 99 {address: principal, size: int})) 
                   (amount int))
 (begin
  (unwrap-panic (if (<= 1 amount) (ok 1) (err "Out of bounds: amount")))
  "Split the amount among the portfolio"
  (let ((total (pie-total pie)))
   (let ((temp_1 (fold divide pie 
                       {total: total, amount: amount, shares: (list)})))
    (let ((shares (get shares temp_1))) 
        shares)))))

(define-private (transfer! (share {address: principal, payment: int}))
 (begin
  (unwrap-panic (if (<= 1 (get payment share)) (ok 1) (err "Out of bounds: payment")))
  (let ((address (get address share))
        (payment (get payment share))) 
           ;; For now pay in stx rather than btc
    (stx-transfer? (to-uint payment) tx-sender address))))

(define-public (distribute! (amount int))
 (begin
  (unwrap-panic (if (<= 1 amount) (ok 1) (err "Out of bounds: amount")))
  "Distribute payment to the portfolio"
  (if (>= amount (to-int (stx-get-balance tx-sender)))
    (ok (map transfer! (distribution (get-pie) amount)))
    (err {message: "Insuffient funding"}))))
    
    